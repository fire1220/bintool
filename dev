#!/bin/bash

declare -r COMMAND_NAME="${0##*/}"

function helpInfo(){
    cat <<!
        command:$COMMAND_NAME
            $COMMAND_NAME [-nj] [--jenkins] "CommitInfo"

        参数：
            -s / --self         只提交到当前分支，不进行切换分支
            -j / --jenkins      把commit_id作为参数,传递给jenkins命令
            --jenkins_xxx=xxx   把xxx=xxx作为参数,传递给jenkins命令,例如：--jenkins_restart=restart-0259
            CommitInfo          提交的git commit 信息

        说明：
            会把git的"当前分支"合并到"${COMMAND_NAME}"开发分支
            如果想变更要合并的开发分支，修改脚本名称即可
        
        example:
            $COMMAND_NAME "提交并且合并到${COMMAND_NAME}分支"
            $COMMAND_NAME -n "只提交到当前分支"

!
    exit 0
}

declare IsPostJenkins=false
declare IsNoCheckout=false
declare -a JenkinsParams=()
OPTIND=1
while getopts ":-:jsh" opt;do
    case "$opt" in
        s)
            IsNoCheckout=true
            ;;
        h)
            helpInfo
            ;;
        j)
            IsPostJenkins=true
            ;;
        -)
            argKeyLong=${OPTARG%%=*}
            if [[ "$OPTARG" =~ = ]];then
                case "$argKeyLong" in
                    *)
                        if [[ "$argKeyLong" =~ ^jenkins_ ]];then
                            JenkinsParams+=("--${OPTARG#jenkins_}")
                        fi
                        ;;
                esac
                continue
            else
                case "$argKeyLong" in
                    "help")
                        helpInfo
                        ;;
                    "jenkins")
                        IsPostJenkins=true
                        ;;
                    "self")
                        IsNoCheckout=true
                        ;;
                    *)
                        ;;
                esac
                continue
            fi
        ;;
    esac
done
shift $(($OPTIND-1))

readonly DevelopmentBranch="$COMMAND_NAME"

declare -r COMMIT_INFO="$1"
if [[ "$COMMIT_INFO" == "" ]];then
    echo "input commit info"
    exit 1
fi

function getCurrentBranchName(){
    local branchList
    local grepList
    local currentBranchName
    branchList=$(git branch) || {
        return 11
    }
    grepList=$(echo "$branchList" | grep "*") || {
        echo "grep no find branch" >&2
        return 12
    }
    currentBranchName=$(echo "$grepList" | awk '{print $2}')
    if [[ "$currentBranchName" == "" ]] ;then
        echo "awk no find branch name" >&2
        return 13
    fi
    echo "$currentBranchName"
    return 0
}

function git_current_branch() {
  local ref
  ref=$(git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && {
        return 21 # no git repo.
    }
    ref=$(git rev-parse --short HEAD 2> /dev/null) || {
        return 22
    }
  fi
  echo ${ref#refs/heads/}
}

function main(){
    local dirName="$(pwd)"
    dirName=${dirName##*/}
    local currentBranchName
    currentBranchName=$(git_current_branch) || {
        local tempCode="$?"
        if [[ "$tempCode" == "21" ]];then
            echo "not a git repository"
        fi
        return $tempCode
    }
    if [[ "$currentBranchName" == "$DevelopmentBranch" ]];then
        echo "current is target development branch"
        return 1
    fi
    local execList
    execList=(
        "git --no-pager diff"
        "git add -A"
        "git commit -m '$COMMIT_INFO'"
        "git pull"
        "git push"
        "git checkout $DevelopmentBranch"
        "git pull"
        "git merge $currentBranchName -m 'Merge branch $currentBranchName into $DevelopmentBranch'"
        "git push"
        "git --no-pager log --no-color -n 1"
        "git checkout $currentBranchName"
    );
    if $IsNoCheckout ;then
        execList=(
            "git --no-pager diff"
            "git add -A"
            "git commit -m '$COMMIT_INFO'"
            "git pull"
            "git push"
        );
    fi
    local implemented
    local commitId=""
    local currentBranchNameTemp
    for commandStr in "${execList[@]}" ;do
        if [[ "$implemented" == "$commandStr" ]];then
            continue
        fi
        implemented="$commandStr"
        dateTime=$(date '+%F %T')
        currentBranchNameTemp=$(git_current_branch) || {
            return 1
        }
        commandPrefix="\033[32m[$dateTime] \033[36m$dirName\033[32m (\033[31;1m$currentBranchNameTemp\033[0;32m)\033[1m ➜ \033[0m"
        echo  -e "${commandPrefix}\033[33m${commandStr}\033[0m"

        if [[ "$commandStr" =~ "log" ]];then
            commitId=$(eval "$commandStr" | head -n1 | awk '{print $2}')
        fi

        eval "$commandStr" || {
            echo ""
            echo -e "Execution Failed"
            echo -e "   Solution:"
            echo -e "       • p: Push Again    "
            echo -e "       • s: Skip          "
            echo -e "       • e: Exit          "
            str=$(echo -e  "\033[31;1mSelect Execution(p/s or e):\033[0m")
            while read -p "$str" -r row ;do
                if [[ "$row" == "e" || "$row" == "E" ]];then
                    return 1
                elif [[ "$row" == "s" || "$row" == "S" ]];then
                    break
                elif [[ "$row" == "p" || "$row" == "P" ]];then
                    local conflictExecList=(
                        "git add -A"
                        "git commit -m 'resolve the conflict：$COMMIT_INFO'"
                        "git pull"
                        "git push"
                    )
                    for val in "${conflictExecList[@]}" ;do
                        dateTime=$(date '+%F %T')
                        implemented="$val"
                        echo  -e "${commandPrefix}\033[33m${val}\033[0m"
                        eval "$val" || {
                            return 1
                        }
                    done
                    break
                else
                    continue
                fi
            done
        }
    done
    if $IsPostJenkins ;then
        if [[ "$commitId" != "" ]];then
            currentBranchNameTemp=$(git_current_branch) || {
                return 1
            }
            commandPrefix="\033[32m[$dateTime] \033[36m$dirName\033[32m (\033[31;1m$currentBranchNameTemp\033[0;32m)\033[1m ➜ \033[0m"
            declare params=""
            for v in "${JenkinsParams[@]}"; do
                params="${params} $v"
            done
            local evalStr="jenkins \"$commitId\""
            if [[ "$params" != "" ]];then
                evalStr="jenkins${params} \"$commitId\""
            fi
            echo  -e "${commandPrefix}\033[33m${evalStr}\033[0m"
            eval "$evalStr"
        fi
    fi
}

main


