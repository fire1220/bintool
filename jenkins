#!/bin/bash

configInit=$(cat <<!
#
# # 该配置是shell脚本的一部分,注意等号两边不能有空格
#
# # 是否是调试模式
# DEBUG=true
# 
# # 【必须配置】 jenkins 用户名
# USERNAME=xxxx
#
# # 【必须配置】jenkins 的 APP_TOKEN
# APP_TOKEN=xxxx
#
# # 【必须配置】jenkins 的地址
# URL=https://test-jenkins.xxxx.com
#
# # 【必须配置】当前文件夹和 pod name 的对应关系
# POD_NAME_LIST=(
#     wm-light-backend=k8s-test-php-backend-new
#     wm-light-frontend=k8s-test-php-frontend-new
# )
#
# # 【必须配置】当前文件夹和 jenkins 的发布参数的对应关系
# # 会把 git 的 commit id 传入到该参数里
# PARAM_COMMIT_ID_LIST=(
#     wm-backend=backend_version
#     wm-backend=title
#     wm-frontend=frontend_version
# )
#
!
)

CONFIG_PATH="$HOME/.config/jenkins/.jenkinsrc"

declare -r DIR_NAME="$(basename "$(pwd)")"

declare -r SCRIPT_EXEC_TIME="$(date +'%s')"

if [[ "$DEBUG" != "true" ]] || [[ "$DEBUG" != "false" ]];then
    DEBUG=false
fi

function helpInit(){
    cat <<!
        command [-cd] commitId

        第一次执行会自动生成一个配置文件:
            1.配置文件路径："$CONFIG_PATH"
            2.编辑该配置文件后就可以使用了

        参数：
            -h / --help                     帮助
            -c / commitid  commit_id        commitId(默认选项)
            -d / details   [build_number]   查看发布详情
                                                如果不传入[build_number]则会选择pod的最新发布的详情，等同于-l
                                                参数格式：buildNumber 或 jobName/buildNumber
                                                案例1：864
                                                案例2：k8s-test-php-wm-light-backend-new/864
                                                如果是buildNumber这种形式，则会进入配置的服务器列表，选择对应的服务器即可
            -l / lastinfo                   查看最后发布的信息
                                                可选参数格式：jobName(如果不传jobName则进入列表手动选择)
                                                案例：k8s-test-php-wm-light-backend-new

!
    exit 0
}


if [ ! -f "$CONFIG_PATH" ];then
    if [ ! -d "$(dirname "$CONFIG_PATH")" ];then
        mkdir -p "$(dirname "$CONFIG_PATH")"
    fi
    echo "$configInit" > "$CONFIG_PATH"
fi

. "$CONFIG_PATH"


declare -r CURL_SCRIPT_BUILD="curl -X POST -u ${USERNAME}:${APP_TOKEN} '${URL}/job/%s/buildWithParameters' %s"
declare -r CURL_SCRIPT_LAST_BUILD="curl -s -X POST -u ${USERNAME}:${APP_TOKEN} '${URL}/job/%s/lastBuild/api/json?pretty=true'"
declare -r CURL_SCRIPT_DETAILS="curl -s -X POST -u ${USERNAME}:${APP_TOKEN} '${URL}/job/%s/api/json?pretty=true'"

declare -r CURL_SCRIPT_LAST_BUILD_NUMBER="${CURL_SCRIPT_LAST_BUILD} | jq '.number'"

# 在配置列表中获取pod name
declare READ_CONFIG_JOB_NAME=""

function main(){
    local mainParam=""
    local isDetails=false
    local isLastBuild=false
    local commitId=""
    OPTIND=1
    while getopts ':c:-:hdl' opt;do
        case "$opt" in
            c)
                commitId="$OPTARG"
                ;;
            h)
                helpInit
                ;;
            d)
                isDetails=true
                ;;
            l)
                isLastBuild=true
                ;;
            -)
                local longArgKey="${OPTARG%%=*}"
                local longArgVal="${OPTARG#*=}"
                case "$longArgKey" in
                    "help")
                        helpInit
                        ;;
                    "commitid")
                        if [[ "${longArgKey}" == "" ]];then
                            echo "param --${longArgKey} 的值不能为空"
                            exit 1
                        fi
                        commitId="$longArgVal"
                        ;;
                    "details")
                        if [[ "$longArgVal" == "details" ]] || [[ "$longArgVal" == "" ]] || [[ "$longArgVal" == "true" ]];then
                            isDetails=true
                        else
                            echo "param --${longArgKey} 的值不正确，值应该是空或者true"
                            exit 1
                        fi
                        ;;
                    "lastinfo")
                        if [[ "$longArgVal" == "lastinfo" ]] || [[ "$longArgVal" == "" ]] || [[ "$longArgVal" == "true" ]];then
                            isLastBuild=true
                        else
                            echo "param --${longArgKey} 的值不正确，值应该是空或者true"
                            exit 1
                        fi
                        ;;
                esac
                ;;
        esac
    done
    shift $(($OPTIND-1))

    if [[ "$USERNAME" == "" ]] || [[ "$APP_TOKEN" == "" ]] || [[ "$URL" == ""  ]] || [[ "$POD_NAME_LIST" == "" ]] || [[ "$PARAM_COMMIT_ID_LIST" == "" ]];then
        echo "请先编辑配置文件：$CONFIG_PATH"
        exit 0
    fi

    mainParam="$1"

    if $isDetails ;then
        local jobNameAndbuildNumber="$mainParam"
        if [[ "$jobNameAndbuildNumber" == "" ]];then
            getJobNameByRead
            if [[ "$READ_CONFIG_JOB_NAME" == "" ]];then
                exit 0
            fi
            lastBuildId="$(lastBuild "$READ_CONFIG_JOB_NAME"| jq -r '.id')"||{
                type jq &> /dev/null || {
                    cat <<!
            $(echo -e "\033[31m 需要安装jq命令\033[0m：")
                Linux: yum install jq
                MacOS: brew install jq
!
                }
                echo "$lastBuildId"
                exit 1
            }
            if [[ "$lastBuildId" == "" ]];then
                echo "没有找到对应的id"
            fi
            jobNameAndbuildNumber="${READ_CONFIG_JOB_NAME}/${lastBuildId}"
        fi
        details "$jobNameAndbuildNumber"
        exit 0
    fi

    if $isLastBuild ;then
        local jobName="$mainParam"
        lastBuild "$jobName"
        exit 0
    fi

    if [[ "$commitId" == "" ]];then
        commitId="$mainParam"
    fi
    buildAndProgress "$commitId"
}

# 查看最后发布的信息
function lastBuild(){
    local jobName="$1"
    if [[ "$jobName" != "" ]];then
        execStr=$(printf "$CURL_SCRIPT_LAST_BUILD" "$jobName")
        eval "$execStr"
        exit 1
    fi
    local i=1
    declare -a podNameList=()
    for v in "${POD_NAME_LIST[@]}";do
        podName="${v#*=}"
        podNameList[$i]="$podName"
        printf "%5s %-30s\n" "${i}" "${podName}"
        i=$(($i+1))
    done
    declare -i row
    while read -p "select num:" -r row;do
        local i=1
        jobName="${podNameList[$row]}"
        if [[ "$jobName" == "" ]];then
            for v in "${podNameList[@]}";do
                printf "%5s %-30s\n" "${i}" "${v}"
                i=$(($i+1))
            done
            continue
        fi
        execStr=$(printf "$CURL_SCRIPT_LAST_BUILD" "$jobName")
        eval "$execStr"
        echo ""
        return 0
    done
    return 0
}

# 在配置列表中获取jobName就是对应的pod
function getJobNameByRead(){
    local i=1
    declare -a podNameList=()
    for v in "${POD_NAME_LIST[@]}";do
        podName="${v#*=}"
        podNameList[$i]="$podName"
        printf "%5s %-30s\n" "${i}" "${podName}"
        i=$(($i+1))
    done
    declare -i row
    while read -p "select num:" -r row;do
        local i=1
        for v in "${podNameList[@]}";do
            printf "%5s %-30s\n" "${i}" "${v}"
            i=$(($i+1))
        done
        jobName="${podNameList[$row]}"
        if [[ "$jobName" == "" ]];then
            continue
        fi
        READ_CONFIG_JOB_NAME="$jobName"
        echo ""
        return 0
    done
    return 0
}

# 查看发布的详情
function details(){
    local jobNameAndbuildNumber="$1"
    if [[ "$jobNameAndbuildNumber" == "" ]] ;then
        cat >&2 <<!
            查看发布详情的参数不能为空

            参数格式：
                jobName/buildNumber

            案例：
                k8s-test-php-wm-light-backend-new/864
!
        exit 1
    fi
    if [[ "$jobNameAndbuildNumber" =~ / ]];then
        execStr=$(printf "$CURL_SCRIPT_DETAILS" "$jobNameAndbuildNumber")
        eval "$execStr"
        echo ""
        return 0
    fi
    local buildNumber="$jobNameAndbuildNumber"
    local jobNameList=()
    local i=0
    for v in "${POD_NAME_LIST[@]}" ;do
        ((i++))
        pod="${v#*=}"
        jobNameList[$i]="$pod"
        printf "%5s %-30s\n" "$i" "$pod"
    done
    declare -i row
    while read -p "select num:" -r row ; do
        local i=0
        if (( $row <= 0 )) || (( $row > ${#jobNameList[@]}));then
            for v in "${jobNameList[@]}";do
                ((i++))
                printf "%5s %-30s\n" "$i" "$v"
            done
            continue
        fi
        execStr=$(printf "$CURL_SCRIPT_DETAILS" "${jobNameList[$row]}/${buildNumber}")
        eval "$execStr"
        echo ""
        if $DEBUG ;then
            echo "$execStr"
        fi
        return 0
    done
    return 0
}

# 构建并且显示构建进度
function buildAndProgress(){
    commitId="$1"
    if [[ "$commitId" == "" ]];then
        echo >&2 "commitId 不能为空"
        exit 1
    fi
    local params=""
    for v in "${PARAM_COMMIT_ID_LIST[@]}";do
        local name="${v%%=*}"
        local paramKey="${v#*=}"
        if [[ "$name" != "$DIR_NAME" ]];then
            continue
        fi
        params="${params} --form '${paramKey}=\"${commitId}\"'"
    done

    local podList=()
    local podListIndex=0
    local execStr=""
    for v in "${POD_NAME_LIST[@]}";do
        local name="${v%%=*}"
        local podName="${v#*=}"
        if [[ "$name" != "$DIR_NAME" ]];then
            continue
        fi
        execStr=$(printf "$CURL_SCRIPT_BUILD" "${podName}" "${params}")
        if $DEBUG ;then
            echo "$execStr"
        fi
        eval "$execStr" || {
            echo -e "\033[31m【${podName} build error】\033[0m"
            continue
        }
        podList[$podListIndex]="${podName}"
        podListIndex=$(($podListIndex+1))
    done
    if [[ "$execStr" == "" ]];then
        echo "没有匹配到要构建的指令,需要在配置文件里添加"
        echo "配置文件路径:${CONFIG_PATH}"
        exit 0
    fi
    if ((${#podList[@]} == 0));then
        exit 0
    fi
    local sttyBak=$(stty -g)
    stty -echo -icanon
    progressPod "${podList[@]}"
    read -t 1 -r row
    stty "$sttyBak"
    exit 0
}

function progressPodListFun(){
    if [[ "$podList" == "" ]];then
        return 0
    fi
    local progressPodList=()
    local progressIndex=0
    for v in "${podList[@]}";do
        execStr=$(printf "$CURL_SCRIPT_LAST_BUILD_NUMBER" "${v}")
        local buildNumber="$(eval "$execStr")"
        progressPodList[$progressIndex]="${v}/${buildNumber}"
        progressIndex=$(($progressIndex+1))
    done
    echo ${progressPodList[@]}
}

# ret code: 
#    0  binding
#    11 continue
#    12 exit
#    13 error
function progressFmt(){
    local runResporse="$1"
    local buildBeginTimeInt="$2"
    local building
    local estimatedDuration
    local timestamp
    local result
    local isJqError=true
    if [[ "$buildBeginTimeInt" == "" ]];then
        buildBeginTimeInt=$SCRIPT_EXEC_TIME
    fi
    building="$(echo "$runResporse" | jq '.building')" && {
        isJqError=false
    }
    estimatedDuration="$(echo "$runResporse" | jq '.estimatedDuration')" && {
        isJqError=false
    }
    timestamp="$(echo "$runResporse" | jq -r '.timestamp')" && {
        isJqError=false
    }
    result="$(echo "$runResporse" | jq -r '.result')" && {
        isJqError=false
    }
    if $isJqError ;then
        echo >&2 "$runResporse"
        echo >&2 "数据解析失败,不是一个有效的json"
        return 13
    fi
    if [[ "$timestamp" == "" ]];then
        printf "\r没有获取到时间%s" "${point}."
        return 11
    fi
    if (( $timestamp > 9000000000 ));then
        timestamp=$(($timestamp/1000))
    fi
    if (($timestamp < $SCRIPT_EXEC_TIME));then
        declare -a pointList=('-' '\\' '|' '/')
        for ((i=0;i<=($v%4);i++)) ;do
            point="${pointList[$i]}"
        done
        if $DEBUG ;then
            printf "\r正在获取中(jenkinsTimestamp:${timestamp};scriptExecTime:${SCRIPT_EXEC_TIME})%s" "${point}"
        else
            printf "\r正在获取中%s" "${point}"
        fi
        return 11
    fi
    local now="$(date +'%s')"
    local durationTime=$(($now-$buildBeginTimeInt))
    local waitDurationTime=$(($buildBeginTimeInt-$SCRIPT_EXEC_TIME))
    local proportionNum="$((100000*$durationTime/$estimatedDuration))"
    if (($proportionNum > 100)) ;then
        proportionNum=99
    fi
    if [[ "$result" == "SUCCESS" ]];then
        proportionNum=100
    fi
    resultTemp="$result"
    if [[ "$resultTemp" == "null" ]];then
        resultTemp="BUILDING"
    fi
    local strTempCurrent="[${v2}]:【Wait:${waitDurationTime}s】【Build:${durationTime}s】【${proportionNum}％】【${resultTemp}】"
    printf "${strTempCurrent}"
    if [[ "$result" == "null" ]];then
        return 0
    fi
    return 12
}

function progressPod() {
    printf "准备发布"
    sleep 2
    declare -a progressPodList=($(progressPodListFun $@))
    if [[ "$progressPodList" == "" ]];then
        return 0
    fi
    local endStr=""
    local v2Index=0
    declare -a progressRet=()
    declare -a progressRequest=()
    declare -a buildBeginTimeList=()
    for v in {1..500};do
        local strTemp=""
        local strTempSuffix=""
        local isContinue=false
        local tempNum="${#progressPodList[@]}"
        v2Index=0
        for v2 in ${progressPodList[@]};do
            if [[ "${buildBeginTimeList[$v2Index]}" == "" ]];then
                buildBeginTimeList[$v2Index]="$(date +'%s')"
            fi
            isContinue=false
            local strTempCurrent="${progressRet[$v2Index]}"
            local execStr="${progressRequest[$v2Index]}"
            local statusProgressFmt=0
            if [[ "$strTempCurrent" == "" ]];then
                execStr=$(printf "$CURL_SCRIPT_DETAILS" "${v2}")
                if $DEBUG ;then
                    progressRequest[$v2Index]="$execStr"
                    if (($v2Index>0));then
                        endStr="${endStr}\033[1B"
                    fi
                    if [[ "$strTemp" == "" ]];then
                        strTemp="${execStr}"
                    else
                        strTemp="${strTemp}\n${execStr}"
                        strTempSuffix="${strTempSuffix}\033[1A"
                    fi
                fi
                local runResporse="$(eval "$execStr")"
                strTempCurrent=$(progressFmt "$runResporse" "${buildBeginTimeList[$v2Index]}")
                statusProgressFmt="$?"
            elif $DEBUG ;then
                if (($v2Index>0));then
                    endStr="${endStr}\033[1B"
                fi
                if [[ "$strTemp" == "" ]];then
                    strTemp="${execStr}"
                else
                    strTemp="${strTemp}\n${execStr}"
                    strTempSuffix="${strTempSuffix}\033[1A"
                fi
            fi
            local isBreak=false
            case "$statusProgressFmt" in
                11)
                    isContinue=true
                    isBreak=true
                    buildBeginTimeList[$v2Index]="$(date +'%s')"
                    ;;
                12)
                    progressRet[$v2Index]="$strTempCurrent"
                    ;;
                13)
                    exit 3
                    ;;
                *)
                    ;;
            esac
            if (($v2Index>0));then
                endStr="${endStr} \033[1B"
            fi
            v2Index=$(($v2Index+1))
            if [[ "$strTemp" == "" ]];then
                strTemp="${strTempCurrent}"
            else
                strTemp="${strTemp}\n${strTempCurrent}"
                strTempSuffix="\033[1A${strTempSuffix}"
            fi
            if $isBreak ;then
                break
            fi
        done
        printf "\r${strTemp}${strTempSuffix}"
        if [[ "${#progressPodList[@]}" == "${#progressRet[@]}" ]];then
            break
        fi
        if $isContinue ;then
            sleep 2
            progressPodList=($(progressPodListFun $@))
            if [[ "$progressPodList" == "" ]];then
                return 0
            fi
            continue
        fi
        sleep 2
    done
    printf "${endStr}\n"
    return 0
}

main $@
