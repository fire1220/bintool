#!/bin/bash

declare PWDINFO="$(pwd -P)"
declare -r DIR_NAME="$(basename "$PWDINFO")"  # 当前目录名称
declare -r SCRIPT_EXEC_TIME="$(date +'%s')"   # 脚本执行开始时间
declare BuildBeginTimeInt="$SCRIPT_EXEC_TIME" # 构建开始时间

# 是:采用获取最后一个发布数据，如果最后一个发布数据不是最新的，则重复尝试
# 否:采用轮询build返回的header的Location地址
declare -r IS_LAST_GET_NUMBER=false

declare -r CONFIG_DIR_PATH="$HOME/.config/jenkins"  # 配置文件目录
declare -r CONFIG_JENKINS_NAME="jenkins.rc"         # 配置文件名称，存放账户信息
declare -r CONFIG_PROJECT_NAME="project.rc"         # 配置文件名称，存放项目信息
declare -r PROJECT_PATH_TO_NAME="${PWDINFO//\//_}"

declare ConfigName="default"      # 默认配置目录名称
declare ConfigPath=""             # 配置文件，存放账户信息
declare ConfitProjectPath=""      # 配置文件，存放项目信息
function resetConfitProjectPath(){
    ConfigPath="${CONFIG_DIR_PATH}/${ConfigName}/${CONFIG_JENKINS_NAME}"                                    # 配置文件，存放账户信息
    ConfitProjectPath="${CONFIG_DIR_PATH}/${ConfigName}/${PROJECT_PATH_TO_NAME}/${CONFIG_PROJECT_NAME}"     # 配置文件，存放项目信息
    confitProjectPathDir="$(dirname "$ConfitProjectPath")"
    if [ ! -d "${confitProjectPathDir}" ];then
        mkdir -p "${confitProjectPathDir}"
    fi
    if [ ! -f "$ConfigPath" ];then
        touch "$ConfigPath"
    fi
    if [ ! -f "$ConfitProjectPath" ];then
        touch "$ConfitProjectPath"
    fi
}
declare ConfigUsername=""
declare ConfigURL=""
declare ConfigAppToken=""
resetConfitProjectPath && . "$ConfigPath" && . "$ConfitProjectPath"

# true：采用\033[A的方式定位，false：采用 \033[s、\033[u的方式定位
declare ConfigIs033a=true
declare ConfigDebug=false             # 调试模式
declare ConfigPrintInfo=false         # 打印配置信息

function helpInit(){
    cat <<!
        command [-cdhsl] commitId
            构建jenkins或查看已经构建的信息

        案例:command "cfdaa8"

        参数：
            -h / --help                         帮助
            -s / --configname name              指定链接服务的配置名称
            -c / --commitid   commit_id         构建Jenkins，commitId(默认选项)
            --xxx=xxx                           构建jenkins时自定义传入参数，例如--restart=restart-0260
            -d / --details   [build_number]     查看发布详情
                                                    如果不传入[build_number]则会选择pod的最新发布的详情，等同于-l
                                                    参数格式：buildNumber 或 jobName/buildNumber
                                                    案例1：864
                                                    案例2：k8s-test-php-wm-light-backend-new/864
                                                    如果是buildNumber这种形式，则会进入配置的服务器列表，选择对应的服务器即可
            -l / --lastinfo                     查看最后发布的信息
                                                    可选参数格式：jobName(如果不传jobName则进入列表手动选择)
                                                    案例：k8s-test-php-wm-light-backend-new
            --debug                             开启调试模式
            --setconnect                        设置链接信息
            --setconfig                         设置当前项目配置
            --getconfig                         查看当前项目配置
            --getconfiglist                     获取配置列表

!
    exit 0
}

# /job/k8s-test-go-wm-light-practice-2/409/wfapi/describe/api/json

function curlUrlInit(){
    CURL_SRCIPT_JOBS_HEAD="curl -I -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/api/json'"                                 # 只打印响应头，用于测试配置
    CURL_SRCIPT_JOBS_LIST="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/api/json'"                                    # 所有jobs列表
    CURL_SRCIPT_JOB_CONFIG="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/job/%s/api/json'"                            # 获取单个job的参数配置
    CURL_SCRIPT_BUILD="curl -i -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/job/%s/buildWithParameters' %s"                # 构建
    CURL_SCRIPT_LAST_BUILD="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/job/%s/lastBuild/api/json?pretty=true'"      # 获取最近构建的详情
    CURL_SCRIPT_DETAILS="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/job/%s/api/json?pretty=true'"                   # 获取构建的详情
    CURL_SCRIPT_QUEUE_ITEM="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '%s' | jq '{task:.task, executable:.executable}'"    # 获取发布状态，只有发布时才可用，该地址是构建成功201后header头里的Location
    CURL_SCRIPT_PLAN="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/job/%s/wfapi/describe/api/json'"                   # 获取各个位置进度
    # 组合命令
    CURL_SCRIPT_LAST_BUILD_NUMBER="${CURL_SCRIPT_LAST_BUILD} | jq '.number'"
    CURL_SRCIPT_JOBS_LIST_JQ="curl -s -X POST -u ${ConfigUsername}:${ConfigAppToken} '${ConfigURL}/api/json' | jq -r '.jobs[]|.name'"         # 所有jobs名称列表
    CURL_SRCIPT_JOB_CONFIG_JQ="${CURL_SRCIPT_JOB_CONFIG} |jq -r '.property[]|{parameterDefinitions}|select(.parameterDefinitions != null)|.parameterDefinitions[]|.name'" # 获取单个job的参数配置
}

curlUrlInit

# 在配置列表中获取pod name
declare READ_CONFIG_JOB_NAME=""

# 全局参数变量列表
declare -a ParamList=()

function testNetConfig(){
    res="$(eval "$CURL_SRCIPT_JOBS_HEAD")" || {
        echo >&2 "CURL请求失败 $res"
        return 10
    }
    if [[ "$res" == "" ]];then
        echo >&2 "配置参数错误,测试请求jenkins没有任何返回数据"
        return 20
    fi
    read -d '' -r protocol code describe <<< "$res"
    case "$code" in
        "200")
            return 0
            ;;
        "401")
            echo >&2 "用户名或token错误,测试请求jenkins被拒绝"
            return 30
            ;;
        "301")
            echo >&2 "配置参数错误,测试请求jenkins,改地址已经被永久重定向 $(echo "$res"|grep "^Location:")"
            return 30
            ;;
        *)
            echo >&2 "配置参数错误,测试请求jenkins失败"
            return 40
            ;;
    esac
    return 0
}

function setConfigBaseInfo(){
    forcsSet="$1"
    if [[ "$forcsSet" == "" ]] || [[ "$forcsSet" != "true" ]];then
        forcsSet=false
    fi
    if ! $forcsSet ;then
        if [[ "$ConfigUsername" != "" ]] && [[ "$ConfigAppToken" != "" ]] && [[ "$ConfigURL" != ""  ]] ;then
            return 0
        fi
    fi
    local oldUsername="${ConfigUsername}"
    local oldUrl="${ConfigURL}"
    local oldAppToken="${ConfigAppToken}"
    local titleUsername=""
    local titleUrl=""
    local titleAppToken=""
    if [[ "$oldUsername" != "" ]] ;then
        titleUsername="[默认：${oldUsername}]"
    fi
    if [[ "$oldUrl" != "" ]];then
        titleUrl="[默认：${oldUrl}]"
    fi
    if [[ "$oldAppToken" != "" ]];then
        titleAppToken="[默认：${oldAppToken}]"
    fi
    declare -a inputList=("用户名(jenkins的登录名)${titleUsername}:" "域名(kenkins的访问域名)${titleUrl}:" "app token(设置位置：点击右上角用户名->设置->API Token->添加新Token)${titleAppToken}:")
    declare -a inputOldAnswerList=("${oldUsername}" "${oldUrl}" "${oldAppToken}")
    declare -a inputValueList=()
    while true;do
        for k in "${!inputList[@]}";do
            while read -p "${inputList[$k]}" -r row;do
                if [[ "$row" == "" ]];then
                    if [[ "${inputOldAnswerList[$k]}" == "" ]];then
                        continue
                    else
                        inputValueList[$k]="${inputOldAnswerList[$k]}"
                    fi
                else
                    inputValueList[$k]="$row"
                fi
                break
            done
        done
        ConfigUsername="${inputValueList[0]}"
        ConfigURL="${inputValueList[1]}"
        ConfigAppToken="${inputValueList[2]}"
        if [[ "${oldUsername}" == "$ConfigUsername" ]] && [[ "${oldUrl}" == "${ConfigURL}" ]] && [[ "${oldAppToken}" == "${ConfigAppToken}" ]] ;then
            return 0
        fi
        curlUrlInit
        res="$(testNetConfig)" && {
            configPathDir="$(dirname "$ConfigPath")"
            if [[ "$configPathDir" != "" ]];then
                rm -rf "$configPathDir"
                resetConfitProjectPath
            fi
            echo "$(echo "# 用户名";declare -p ConfigUsername;echo "# ConfigURL";declare -p ConfigURL;echo "# APP Token";declare -p ConfigAppToken)" > "$ConfigPath"
            echo -n > "$ConfitProjectPath"
            break
        }
        while read -p "$(echo -e "${res}\033[33m➜\033[0m是否需要重新配置(Y/n):")" -r row ;do
            case "$row" in
                Y|y|"")
                    break
                    ;;
                N|n)
                    break 2
                    ;;
                *)
                    continue
                    ;;
            esac
        done
    done
    return 0
}

# 添加修改配置文件
function setConfigParamCommitIdList(){
    isAsk="$1"
    isClear="$2"
    if [[ "$isAsk" == "" ]] || [[ "$isAsk" != "true" ]];then
        isAsk=false
    fi
    if [[ "$isClear" == "" ]] || [[ "$isClear" != "true" ]];then
        isClear=false
    fi
    if $isClear ;then
        ConfigDirToJobsNameList=()
        ConfigDirToParamsNameList=()
        echo -n > "$ConfitProjectPath"
    fi
    if $isAsk ;then
        while read -p "添加项目配置[N/y]:" -r row;do
            case "$row" in
                y|Y)
                    break
                    ;;
                n|N|"")
                    return 0
                    ;;
                *)
                    continue
                    ;;
            esac
        done
    fi
    listAllRes="$(eval "$CURL_SRCIPT_JOBS_LIST_JQ")"
    local closureReadNumberSearch="$DIR_NAME"

    read -d '' -ra closureReadNumberDataList <<< "$listAllRes"
    closureReadNumberReadStr="选择目录绑定的项目名称(输入编号，多个用空格分开):"
    function closureReadNumber(){
        if [[ "$closureReadNumberDataList" == "" ]];then
            return 0
        fi
        if [[ "$closureReadNumberReadStr" == "" ]];then
            closureReadNumberReadStr="select num list(输入编号，多个用空格分开):"
        fi
        closureReadNumberSelectUniq=()
        declare -a list=()
        declare readNumberStr="$closureReadNumberReadStr"
        while true;do
            list=()
            for v in "${closureReadNumberDataList[@]}";do
                if [[ "$closureReadNumberSearch" == "" ]];then
                    list+=("$v")
                elif [[ "$v" == *"${closureReadNumberSearch}"*  ]];then
                    list+=("$v")
                fi
            done
            for k in "${!list[@]}"; do
                local idx=$((k+1))
                local value="${list[$k]}"
                if [[ "$closureReadNumberSearch" != "" ]] && [[ "$closureReadNumberSearch" != "*" ]];then
                    value="$(echo "$value" | sed "s/$closureReadNumberSearch/\\\033[36m${closureReadNumberSearch}\\\033[0m/g")"
                fi
                printf "%-3s %-30s\n" "${idx}" "$(echo -e "${value}")"
            done

            if [[ "$list" == "" ]];then
                readNumberStr="没有找到筛选到${closureReadNumberSearch}数据，输入*获取全部："
            fi
            read -p "$readNumberStr" -r row
            readNumberStr="$closureReadNumberReadStr"
            if [[ "$row" == "" ]];then
                continue
            fi
            if [[ "$row" == "*" ]];then
                closureReadNumberSearch=""
                continue
            fi

            closureReadNumberSelectUniq=()
            if [[ "$row" =~ [[:space:]] ]];then
                local selectListTemp
                read -d '' -ra selectListTemp <<< "$row"
                for v in "${selectListTemp[@]}";do
                    if ! [[ "$v" =~ ^[0-9]+$ ]];then
                        continue 2
                    fi
                    ((v--))
                    if [[ "${list[$v]}" == "" ]];then
                        continue 2
                    fi
                    closureReadNumberSelectUniq[$v]=true
                done
                read -ra selectList <<< "${selectListTemp[@]}"
                break
            elif [[ "$row" =~ ^[0-9]+$ ]];then
                ((row--))
                closureReadNumberSelectUniq[$row]=true
                break
            else
                closureReadNumberSearch="$row"
            fi
        done
        read -ra closureReadNumberDataList <<< "${list[@]}"
        closureReadNumberSearch=""
        closureReadNumberReadStr=""
    }
    declare -a closureReadNumberSelectUniq=()
    closureReadNumber

    declare -a configParamsList=()
    declare -a paramsList=()
    declare -a selectJobsList=()
    for k in "${!closureReadNumberSelectUniq[@]}";do
        jobName="${closureReadNumberDataList[$k]}"
        selectJobsList+=("$jobName")
        if $ConfigDebug ;then
            echo $(printf "$CURL_SRCIPT_JOB_CONFIG_JQ" "$jobName")
        fi
        local paramsListTemp=""
        paramsListTemp="$(eval $(printf "$CURL_SRCIPT_JOB_CONFIG_JQ" "$jobName"))"
        declare -a paramsListAllTemp=()
        read -d '' -ra paramsListAllTemp <<< "${paramsList[@]}"
        while read -r row ;do
            if [[ " ${paramsListAllTemp[@]} " =~ " ${row} " ]];then
                continue
            fi
            paramsList+=("${row}")
        done <<< "$paramsListTemp"
    done
    read -d '' -ra closureReadNumberDataList <<< "${paramsList[@]}"
    closureReadNumberReadStr="选择参数名称(发布时会把commitId传入该参数里)(输入编号，多个用空格分开):"
    closureReadNumber
    declare -a selectParamsList=()
    for k in "${!closureReadNumberSelectUniq[@]}" ;do
        selectParamsList+=("${closureReadNumberDataList[$k]}")
    done
    for v in "${selectJobsList[@]}";do
        local value="${DIR_NAME}=${v}"
        if [[ " ${ConfigDirToJobsNameList[@]} " =~ " ${value} " ]];then
            continue
        fi
        ConfigDirToJobsNameList+=("${value}")
    done
    for v in "${selectParamsList[@]}";do
        local value="${DIR_NAME}=${v}"
        if [[ " ${ConfigDirToParamsNameList[@]} " =~ " ${value} " ]];then
            continue
        fi
        ConfigDirToParamsNameList+=("${value}")
    done
    echo "$(echo "# 当前目录和jobs对应关系";declare -p ConfigDirToJobsNameList;echo "# 值是 commit id 的jenkins参数";declare -p ConfigDirToParamsNameList)" > "$ConfitProjectPath"
}

function getConfigParamCommitIdList(){
    local dirName="$1"
    if [[ "$dirName" == "" ]];then
        return 0
    fi
    declare -a list=()
    for v in "${ConfigDirToParamsNameList[@]}";do
        local name="${v%%=*}"
        local value="${v#*=}"
        if [[ "$name" != "$dirName" ]];then
            continue
        fi
        list+=("$value")
    done
    if [[ "$list" == "" ]];then
        return 10
    fi
    echo "${list[@]}"
    return 0
}

function getConfigPodNameList(){
    local dirName="$1"
    if [[ "$dirName" == "" ]];then
        return 0
    fi

    declare -a list=()
    for v in "${ConfigDirToJobsNameList[@]}";do
        local name="${v%%=*}"
        local value="${v#*=}"
        if [[ "$name" != "$dirName" ]];then
            continue
        fi
        list+=("$value")
    done
    if [[ "$list" == "" ]];then
        return 10
    fi
    echo "${list[@]}"
    return 0
}

# 获取配置的列表
function getConfigListInfo(){
    cat <<!
配置目录: $CONFIG_DIR_PATH
列表:
!
    ls "$CONFIG_DIR_PATH"
    return 0
}

# 打印配置信息
function getConfigInfo(){
    echo ""
    printf "%-13s: %s\n" "用户名" "${ConfigUsername}"
    printf "%-12s: %s\n" "域名" "${ConfigURL}"
    printf "%-10s: %s\n" "APP Token" "${ConfigAppToken}"
    echo ""
    printf "当前目录和jobs对应关系:\n" 
    declare -a jobsNameList=()
    for v in "${ConfigDirToJobsNameList[@]}";do
        local name="${v%%=*}"
        if [[ " ${jobsNameList[@]} " =~ " ${name} " ]];then
            continue
        fi
        jobsNameList+=("$name")
    done
    for v in "${jobsNameList[@]}";do
        printf "\t目录名  : %s\n" "${v}"
        printf "\t项目列表:%s\n"
        for v2 in "${ConfigDirToJobsNameList[@]}";do
            local name="${v2%%=*}"
            local value=""
            if [[ "$v2" =~ = ]];then
                value="${v2#*=}"
            fi
            if [[ "$name" == "$v" ]];then
                printf "\t\t➜ %s\n" "${value}"
            fi
        done
        echo ""
    done
    echo ""
    printf "值是 commit id 的jenkins参数:\n"
    declare -a paramsNameList=()
    for v in "${ConfigDirToParamsNameList[@]}";do
        local name="${v%%=*}"
        if [[ " ${paramsNameList[@]} " =~ " ${name} " ]];then
            continue
        fi
        paramsNameList+=("${name}")
    done
    for v in "${paramsNameList[@]}";do
        printf "\t目录名  : %s\n" "${v}"
        printf "\t参数列表:%s\n"
        for v2 in "${ConfigDirToParamsNameList[@]}";do
            local name="${v2%%=*}"
            local value=""
            if [[ "$v2" =~ = ]];then
                value="${v2#*=}"
            fi
            if [[ "$name" == "$v" ]];then
                printf "\t\t➜ %s\n" "${value}"
            fi
        done
        echo ""
    done
    echo ""
}

function main(){
    local mainParam=""
    local isDetails=false
    local isLastBuild=false
    local commitId=""
    OPTIND=1
    while getopts ':c:s:-:hdl' opt;do
        case "$opt" in
            c)
                commitId="$OPTARG"
                ;;
            s)
                if [[ "$OPTARG" == "" ]];then
                    echo "param --${OPTARG} 的值不正确，值应该是配置名称,并且只能是字母或数字"
                    return 1
                elif ! [[ "$OPTARG" =~ ^[a-zA-Z0-9]+$ ]];then
                    echo "param --${OPTARG} 的值不正确，只能是字母或数字"
                    return 1
                fi
                ConfigName="$OPTARG"
                ;;
            h)
                helpInit
                ;;
            d)
                isDetails=true
                ;;
            l)
                isLastBuild=true
                ;;
            -)
                local longArgKey="${OPTARG%%=*}"
                local longArgVal=""
                if [[ "$OPTARG" =~ = ]];then
                    longArgVal="${OPTARG#*=}"
                fi
                case "$longArgKey" in
                    "help")
                        helpInit
                        ;;
                    "setconnect")
                        setConfigBaseInfo true
                        setConfigParamCommitIdList true true
                        return 0
                        ;;
                    "setconfig")
                        setConfigBaseInfo
                        setConfigParamCommitIdList false true
                        return 0
                        ;;
                    "getconfig")
                        ConfigPrintInfo=true
                        ;;
                    "getconfiglist")
                        getConfigListInfo
                        return 0
                        ;;
                    "debug")
                        ConfigDebug=true
                        ConfigIs033a=false
                        ;;
                    "commitid")
                        if [[ "${longArgKey}" == "" ]];then
                            echo "param --${longArgKey} 的值不能为空"
                            exit 1
                        fi
                        commitId="$longArgVal"
                        ;;
                    "details")
                        if [[ "$longArgVal" == "" ]] || [[ "$longArgVal" == "true" ]];then
                            isDetails=true
                        else
                            echo "param --${longArgKey} 的值不正确，值应该是空或者true"
                            exit 1
                        fi
                        ;;
                    "lastinfo")
                        if [[ "$longArgVal" == "" ]] || [[ "$longArgVal" == "true" ]];then
                            isLastBuild=true
                        else
                            echo "param --${longArgKey} 的值不正确，值应该是空或者true"
                            exit 1
                        fi
                        ;;
                    "configname")
                        if [[ "$longArgVal" == "" ]];then
                            echo "param --${longArgKey} 的值不正确，值应该是配置名称,并且只能是字母或数字"
                            return 1
                        elif ! [[ "$longArgVal" =~ ^[a-zA-Z0-9]+$ ]];then
                            echo "param --${longArgKey} 的值不正确，只能是字母或数字"
                            return 1
                        fi
                        ConfigName="$longArgVal"
                        ;;
                    *)
                        ParamList+=("$OPTARG")
                        ;;
                esac
                ;;
        esac
    done
    shift $(($OPTIND-1))

    resetConfitProjectPath && . "$ConfigPath" && . "$ConfitProjectPath"

    curlUrlInit

    if $ConfigPrintInfo ;then
        getConfigInfo
        return 0
    fi

    if ! $ConfigIs033a ;then
        # trap 'reset -I' EXIT
        reset
    fi

    declare -a commandList=("jq")
    declare isError=false
    for v in "${commandList[@]}";do
        type "$v" &> /dev/null || {
            cat <<!
          $(echo -e "\033[31;1m➜\033[0m") 缺少 ${v} 命令
            安装方法：
                MacOS : brew install $v
                Linux : yum install $v
                Ubuntu: apt install $v
!
        echo ""
        isError=true
    }
    done
    if $isError ;then
        return 1
    fi

    setConfigBaseInfo

    mainParam="$1"

    if $isDetails ;then
        local jobNameAndbuildNumber="$mainParam"
        if [[ "$jobNameAndbuildNumber" == "" ]];then
            getJobNameByRead
            jobName="$READ_CONFIG_JOB_NAME"
            if [[ "$jobName" == "" ]];then
                exit 0
            fi
            lastBuildId="$(lastBuild "$jobName"| jq -r '.id')"||{
                type jq &> /dev/null || {
                    cat <<!
            $(echo -e "\033[31m 需要安装jq命令\033[0m：")
                Linux: yum install jq
                MacOS: brew install jq
!
                }
                echo "$lastBuildId"
                exit 1
            }
            if [[ "$lastBuildId" == "" ]];then
                echo "没有找到对应的id"
            fi
            jobNameAndbuildNumber="${jobName}/${lastBuildId}"
        fi
        details "$jobNameAndbuildNumber"
        exit 0
    fi

    if $isLastBuild ;then
        local jobName="$mainParam"
        lastBuild "$jobName"
        exit 0
    fi

    if [[ "$commitId" == "" ]];then
        commitId="$mainParam"
    fi
    if [[ "$commitId" == "" ]];then
        helpInit
    fi
    buildAndProgress "$commitId"
}

# 查看最后发布的信息
function lastBuild(){
    local jobName="$1"
    if [[ "$jobName" != "" ]];then
        execStr=$(printf "$CURL_SCRIPT_LAST_BUILD" "$jobName")
        eval "$execStr"
        exit 1
    fi
    local i=1
    declare -a podNameList=()
    declare configPodList=""
    configPodList="$(getConfigPodNameList "$DIR_NAME")" || {
        setConfigParamCommitIdList true
        configPodList="$(getConfigPodNameList "$DIR_NAME")"
    }
    if [[ "$configPodList" == "" ]];then
        echo "没有找到对应配置"
        return 0
    fi
    read -ra configPodList <<< "$configPodList"
    for podName in "${configPodList[@]}";do
        podNameList[$i]="$podName"
        printf "%5s %-30s\n" "${i}" "${podName}"
        i=$(($i+1))
    done
    declare -i row
    while read -p "select num:" -r row;do
        local i=1
        jobName="${podNameList[$row]}"
        if [[ "$jobName" == "" ]];then
            for v in "${podNameList[@]}";do
                printf "%5s %-30s\n" "${i}" "${v}"
                i=$(($i+1))
            done
            continue
        fi
        execStr=$(printf "$CURL_SCRIPT_LAST_BUILD" "$jobName")
        if $ConfigDebug ;then
            echo "$execStr"
        fi
        eval "$execStr"
        echo ""
        return 0
    done
    return 0
}

# 在配置列表中获取jobName就是对应的pod
function getJobNameByRead(){
    local i=1
    declare -a podNameList=()
    declare configPodList=""
    configPodList="$(getConfigPodNameList "$DIR_NAME")" || {
        setConfigParamCommitIdList true
        configPodList="$(getConfigPodNameList "$DIR_NAME")"
    }
    if [[ "$configPodList" == "" ]];then
        echo "没有找到对应配置"
        return 0
    fi
    read -ra configPodList <<< "$configPodList"
    for podName in "${configPodList[@]}";do
        podNameList[$i]="$podName"
        printf "%5s %-30s\n" "${i}" "${podName}"
        i=$(($i+1))
    done
    declare -i row
    while read -p "select num:" -r row;do
        local i=1
        for v in "${podNameList[@]}";do
            printf "%5s %-30s\n" "${i}" "${v}"
            i=$(($i+1))
        done
        jobName="${podNameList[$row]}"
        if [[ "$jobName" == "" ]];then
            continue
        fi
        READ_CONFIG_JOB_NAME="$jobName"
        echo ""
        return 0
    done
    return 0
}

# 查看发布的详情
function details(){
    local jobNameAndbuildNumber="$1"
    if [[ "$jobNameAndbuildNumber" == "" ]] ;then
        cat >&2 <<!
            查看发布详情的参数不能为空

            参数格式：
                jobName/buildNumber

            案例：
                k8s-test-php-wm-light-backend-new/864
!
        exit 1
    fi
    if [[ "$jobNameAndbuildNumber" =~ / ]];then
        execStr=$(printf "$CURL_SCRIPT_DETAILS" "$jobNameAndbuildNumber")
        eval "$execStr"
        echo ""
        return 0
    fi
    local buildNumber="$jobNameAndbuildNumber"
    local jobNameList=()
    local i=0
    declare configPodList=""
    configPodList="$(getConfigPodNameList "$DIR_NAME")" || {
        setConfigParamCommitIdList true
        configPodList="$(getConfigPodNameList "$DIR_NAME")"
    }
    if [[ "$configPodList" == "" ]];then
        echo "没有找到对应配置"
        return 0
    fi
    read -ra configPodList <<< "$configPodList"
    for podName in "${configPodList[@]}";do
        ((i++))
        jobNameList[$i]="$podName"
        printf "%5s %-30s\n" "$i" "$podName"
    done
    declare -i row
    while read -p "select num:" -r row ; do
        local i=0
        if (( $row <= 0 )) || (( $row > ${#jobNameList[@]}));then
            for v in "${jobNameList[@]}";do
                ((i++))
                printf "%5s %-30s\n" "$i" "$v"
            done
            continue
        fi
        execStr=$(printf "$CURL_SCRIPT_DETAILS" "${jobNameList[$row]}/${buildNumber}")
        eval "$execStr"
        echo ""
        if $ConfigDebug ;then
            echo "$execStr"
        fi
        return 0
    done
    return 0
}

# 构建并且显示构建进度
function buildAndProgress(){
    declare commitId="$1"
    if [[ "$commitId" == "" ]];then
        echo >&2 "commitId 不能为空"
        return 1
    fi
    declare configCommitIdList=""
    configCommitIdList="$(getConfigParamCommitIdList "$DIR_NAME")" || {
        setConfigParamCommitIdList true
        configCommitIdList="$(getConfigParamCommitIdList "$DIR_NAME")"
    }
    if [[ "$configCommitIdList" == "" ]];then
        echo "没有找到对应配置!"
        return 0
    fi
    read -ra configCommitIdList <<< "$configCommitIdList"
    local params=""
    for paramKey in "${configCommitIdList[@]}";do
        params="${params} --form '${paramKey}=\"${commitId}\"'"
    done

    for v in "${ParamList[@]}";do
        local paramKey="${v%%=*}"
        local paramVal="${v#*=}"
        params="${params} --form '${paramKey}=\"${paramVal}\"'"
    done

    local podList=()
    local execStr=""
    local locationUrlList=()
    declare configPodList=""
    configPodList="$(getConfigPodNameList "$DIR_NAME")" || {
        setConfigParamCommitIdList true
        configPodList="$(getConfigPodNameList "$DIR_NAME")"
    }
    if [[ "$configPodList" == "" ]];then
        echo "没有找到对应配置"
        return 0
    fi
    BuildBeginTimeInt="$(date +'%s')" # 构建开始时间
    read -ra configPodList <<< "$configPodList"
    for podName in "${configPodList[@]}";do
        execStr=$(printf "$CURL_SCRIPT_BUILD" "${podName}" "${params}")
        if $ConfigDebug ;then
            echo "$execStr"
        fi
        local headerInfo=""
        headerInfo="$(eval "$execStr")" || {
            echo -e "\033[31m【${podName} build error】\033[0m"
            continue
        }
        if [[ "$headerInfo" != "" ]];then
            local locationUrl=""
            while read -r row;do
                if [[ "$row" =~ ^Location: ]];then
                    locationUrl="${row#Location: }api/json"
                    break
                fi
            done <<< "$(echo $headerInfo | tr '\r' '\n')"
            if [[ "$locationUrl" != "" ]];then
                locationUrlList+=("$locationUrl")
            fi
        fi
        podList+=("${podName}")
    done
    if [[ "$execStr" == "" ]];then
        echo "没有匹配到要构建的指令,需要在配置文件里添加"
        echo "配置文件路径:${ConfigPath}"
        exit 0
    fi
    if ((${#podList[@]} == 0));then
        exit 0
    fi
    local sttyBak=$(stty -g)
    stty -echo -icanon
    if $IS_LAST_GET_NUMBER ;then
        progressPod "${podList[@]}"
    else
        progressPod "${locationUrlList[@]}"
    fi
    read -t 1 -r row
    stty "$sttyBak"
    exit 0
}

# 获取最后一个pod的列表
function progressPodListLastFun(){
    local podList=("$@")
    if [[ "$podList" == "" ]];then
        return 0
    fi
    local progressPodList=()
    local progressIndex=0
    for v in ${podList[@]};do
        local execStr=$(printf "$CURL_SCRIPT_LAST_BUILD_NUMBER" "${v}")
        local buildNumber="$(eval "$execStr")"
        progressPodList[$progressIndex]="${v}/${buildNumber}"
        progressIndex=$(($progressIndex+1))
    done
    echo ${progressPodList[@]}
}

function progressPodListFun(){
    if $IS_LAST_GET_NUMBER ;then
        progressPodListLastFun "$@"
        return 0
    fi
    local getPodCurlScriptList=("$@")
    if [[ "$podList" == "" ]];then
        return 0
    fi
    local progressPodList=()
    for v in ${getPodCurlScriptList[@]};do
        local execStr="$(printf "$CURL_SCRIPT_QUEUE_ITEM" "$v")"
        local execCurl="$(eval "$execStr")"
        executableNumber="$(echo "$execCurl" | jq '.executable.number')"
        for v in {0..60};do
            if [[ "$executableNumber" != "" ]] && [[ "$executableNumber" != "null" ]];then
                break
            fi
            sleep 1
            execCurl="$(eval "$execStr")"
            executableNumber="$(echo "$execCurl" | jq '.executable.number')"
        done
        buildNumberAndPod="$(echo "$execCurl" | jq -r '.task.name+"/"+(.executable.number|tostring)')"
        progressPodList+=("${buildNumberAndPod}")
    done
    echo "${progressPodList[@]}"
}

# ret code: 
#    0  building
#    11 continue
#    12 exit
#    13 error
function progressFmt(){
    local runResporse="$1"
    local buildDoneTimeInt="$2"
    local podAndNumber="$3"
    local idx="$4"
    local building
    local estimatedDuration
    local timestamp
    local result
    local isJqError=true
    if [[ "$buildDoneTimeInt" == "" ]];then
        buildDoneTimeInt=$SCRIPT_EXEC_TIME
    fi
    building="$(echo "$runResporse" | jq '.building')" && {
        isJqError=false
    }
    estimatedDuration="$(echo "$runResporse" | jq '.estimatedDuration')" && {
        isJqError=false
    }
    timestamp="$(echo "$runResporse" | jq -r '.timestamp')" && {
        isJqError=false
    }
    result="$(echo "$runResporse" | jq -r '.result')" && {
        isJqError=false
    }
    if $isJqError ;then
        echo >&2 "$runResporse"
        echo >&2 "数据解析失败,不是一个有效的json"
        return 13
    fi
    if [[ "$timestamp" == "" ]];then
        printf "\r没有获取到时间%s" "$(loadingStr "$idx")"
        return 11
    fi
    if (( $timestamp > 9000000000 ));then
        timestamp=$(($timestamp/1000))
    fi
    if (($timestamp < $SCRIPT_EXEC_TIME));then
        if $ConfigDebug ;then
            printf "正在获取中(jenkinsTimestamp:${timestamp};scriptExecTime:${SCRIPT_EXEC_TIME})%s" "$(loadingStr "$idx")"
        else
            printf "正在获取中%s" "$(loadingStr "$idx")"
        fi
        return 11
    fi
    local now="$(date +'%s')"
    local durationTime=$(($now-$buildDoneTimeInt))
    local waitDurationTime=$(($buildDoneTimeInt-$BuildBeginTimeInt))
    local proportionNum="$((100000*$durationTime/$estimatedDuration))"
    if (($proportionNum >= 100)) ;then
        proportionNum=99
    fi
    declare bingingEmoji=""
    declare resultTemp="$result"
    if [[ "$resultTemp" == "null" ]];then
        resultTemp="Building"
        bingingEmoji="⏳"
    elif [[ "$resultTemp" == "SUCCESS" ]];then
        proportionNum=100
        bingingEmoji="✅"
    else
        resultTemp="\033[31m${resultTemp}\033[0m"
    fi
    local execStr="$(printf "$CURL_SCRIPT_PLAN" "$podAndNumber")"
    local execCurl="$(eval "$execStr")"
    IFS=$'\n' read -d'\n' -ra playInfoNameList <<< "$(echo "$execCurl" | jq -r '.stages[]|.name' 2> /dev/null)"
    IFS=$'\n' read -d'\n' -ra playInfoStatusList <<< "$(echo "$execCurl" | jq -r '.stages[]|.status' 2> /dev/null)"
    local playInfo=""
    if [[ "$playInfoStatusList" != "" ]];then
        for k in "${!playInfoStatusList[@]}";do
            if [[ "${playInfoStatusList[$k]}" == "SUCCESS" ]];then
                continue
            fi
            playInfo="【\033[36m${playInfoNameList[$k]}\033[0m】"
            break
        done
    fi
    local strTempCurrent="[${podAndNumber}]:【Wait:${waitDurationTime}s】【Build:${durationTime}s】【${proportionNum}％】【${resultTemp}】${playInfo}${bingingEmoji}"
    printf "${strTempCurrent}"
    if [[ "$result" == "null" ]];then
        return 0
    fi
    return 12
}

function loadingStr(){
    local idx="$1"
    local point=""
    declare -a pointList=('-' '\\' '|' '/')
    for ((i=0;i<=($idx%4);i++)) ;do
        point="${pointList[$i]}"
    done
    echo "${point} "
    return 0
}

function progressPod() {
    printf "准备发布"
    sleep 2
    declare -a progressPodList=()
    if $IS_LAST_GET_NUMBER ;then
        progressPodList=($(progressPodListFun "$@"))
        if [[ "$progressPodList" == "" ]];then
            return 0
        fi
    else
        progressPodList=("$@")
    fi
    local v2Index=0
    declare -a progressRet=()
    declare -a progressRequest=()
    declare -a buildBeginTimeList=()
    declare -a podAndNumberList=()
    declare skipLineNumber=0
    for v in {1..500};do
        declare -a listPrintData=()
        local isContinue=false
        v2Index=0
        for v2 in ${progressPodList[@]};do
            if [[ "${buildBeginTimeList[$v2Index]}" == "" ]];then
                buildBeginTimeList[$v2Index]="$(date +'%s')"
            fi

            local strTempCurrent="${progressRet[$v2Index]}"
            local execStr="${progressRequest[$v2Index]}"

            if $IS_LAST_GET_NUMBER ;then
                podAndNumber="$v2"
            else
                if [[ "${podAndNumberList[$v2Index]}" != "" ]];then
                    podAndNumber="${podAndNumberList[$v2Index]}"
                else
                    local execStr="$(printf "$CURL_SCRIPT_QUEUE_ITEM" "$v2")"
                    local execCurl="$(eval "$execStr")"
                    executableNumber="$(echo "$execCurl" | jq '.executable.number')"
                    podAndNumber="$(echo "$execCurl" | jq -r '.task.name+"/"+(.executable.number|tostring)')"
                    if [[ "$executableNumber" == "" ]] || [[ "$executableNumber" == "null" ]];then
                        strTempCurrent="$(printf "[%s]正在获取中%s" "$podAndNumber" "$(loadingStr "$v")")"
                        buildBeginTimeList[$v2Index]="$(date +'%s')"
                    else
                        podAndNumberList[$v2Index]="$podAndNumber"
                    fi
                fi
            fi

            isContinue=false
            local statusProgressFmt=0
            if [[ "$strTempCurrent" == "" ]];then
                execStr=$(printf "$CURL_SCRIPT_DETAILS" "${podAndNumber}")
                if $ConfigDebug ;then
                    progressRequest[$v2Index]="$execStr"
                    listPrintData+=("${execStr}")
                fi
                local runResporse="$(eval "$execStr")"
                strTempCurrent=$(progressFmt "$runResporse" "${buildBeginTimeList[$v2Index]}" "${podAndNumber}" "$v")
                statusProgressFmt="$?"
            elif $ConfigDebug ;then
                listPrintData+=("${execStr}")
            fi
            local isBreak=false
            case "$statusProgressFmt" in
                11)
                    isContinue=true
                    isBreak=true
                    buildBeginTimeList[$v2Index]="$(date +'%s')"
                    ;;
                12)
                    progressRet[$v2Index]="$strTempCurrent"
                    ;;
                13)
                    exit 3
                    ;;
                *)
                    ;;
            esac
            v2Index=$(($v2Index+1))
            listPrintData+=("${strTempCurrent}")
            if $isBreak ;then
                break
            fi
        done

        if $ConfigIs033a ;then
            local skipLineNumberTemp=""
            if (($skipLineNumber>0));then
                skipLineNumberTemp="\033[${skipLineNumber}A"
            fi
            skipLineNumber=$((${#listPrintData[@]}-1))
        fi

        local tempPrintStr=""
        for k in "${!listPrintData[@]}";do
            local n=""
            if (($k>0));then
                n="\n"
            fi
            # tempPrintStr="${tempPrintStr}${n}\r\033[2K${listPrintData[$k]}"
            tempPrintStr="${tempPrintStr}${n}${listPrintData[$k]}"
        done

        if $ConfigIs033a ;then
            printf "${skipLineNumberTemp}\r\033[J${tempPrintStr}"
        else
            local suffix="\033[u"
            if [[ "${#progressPodList[@]}" == "${#progressRet[@]}" ]];then
                suffix="\033[s\033[u"
            fi
            printf "\r\033[s\033[J${tempPrintStr}${suffix}"
            # echo "\r\033[s\033[J${tempPrintStr}${suffix}"
        fi

        if [[ "${#progressPodList[@]}" == "${#progressRet[@]}" ]];then
            break
        fi
        if $isContinue ;then
            sleep 2
            progressPodList=($(progressPodListFun "$@"))
            if [[ "$progressPodList" == "" ]];then
                return 0
            fi
            continue
        fi
        sleep 2
    done
    echo ""
    return 0
}

main "$@"
