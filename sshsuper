#!/bin/bash

readonly SCRIPT_NAME="${0##*/}"
readonly CONFIG_PATH="$HOME/.config/${SCRIPT_NAME}.json"
if [ ! -d "${CONFIG_PATH%/*}" ] ;then
    mkdir -p "${CONFIG_PATH%/*}"
fi
if [ ! -f "${CONFIG_PATH}" ];then
    touch "${CONFIG_PATH}"
fi
CONFIG_DATA="$(jq '.' "${CONFIG_PATH}")" || {
    echo "$CONFIG_DATA"
    exit 1
}

function helpInfo(){
    echo "help"
}

function formatList(){
    local search="$1"
    declare isOnlyData=false
    if [[ "$2" == "true" ]];then
        isOnlyData=true
    fi
    if [[ "$CONFIG_DATA" == "" ]];then
        echo "------"
        echo "目前没有配置，需要添加配置"
    fi
    local data=$(echo "$CONFIG_DATA" | jq -r '.[]|"\(.title)\t\(.host)"')
    local list="$data"
    if [[ "$search" != "" ]];then
        list=$(echo "$data" | grep "$search")
    fi
    local dataList=""
    declare -i maxLineNum=0
    if [[ "$list" != "" ]];then
        {
            local i=0
            while read -r title host;do
                ((i++))
                local num=${#title}
                local titleWidth=30
                declare -i currentLineNum=0
                for (( j=0; j<$num; j++ ));do
                    if [[ ! "${title:$j:1}" =~ [[:alnum:][:punct:]] ]];then
                        ((currentLineNum++))
                        ((titleWidth++))
                    fi
                done
                rowData="$(printf "%-4d%-${titleWidth}s %-30s" "$i" "$title" "$host")"
                currentLineNum=$((${#rowData}+$currentLineNum))
                if ((${currentLineNum}>$maxLineNum));then
                    maxLineNum=${currentLineNum}
                fi
                dataList="${dataList}${rowData}\n"
            done
        } <<< "$list"
        dataList="$(echo -e "$dataList")"
    fi
    serverListTitle="                   server list"
    splitLine="=================================================="
    if (($maxLineNum > 50));then
        tempFirstLineNum=$(($maxLineNum - 50))
        for ((j=0;j<$tempFirstLineNum;j++));do
            if (($j%2==0));then
                serverListTitle=" ${serverListTitle}"
            fi
            splitLine="${splitLine}="
        done
    fi
    if $isOnlyData ;then
        echo "${dataList}"
    else
        cat <<!
${serverListTitle}
${splitLine}
${dataList}
!
    fi
}

function addConfig(){
    declare -a list=("名称：" "主机：" "端口：" "用户名：" "密码：")
    declare -a cfg=()
    local searchVal
    for v in {0..4};do
        while read -p "${list[$v]}" row;do
            if [[ "$row" == "" ]];then
                echo "    ${list[$v]%：}不能为空"
                continue
            fi
            if [[ "$v" == "2" ]] && [[ ! "$row" =~ ^[0-9]+$ ]];then
                echo "    端口号必须是数字"
                continue
            fi
            if [[ "$CONFIG_DATA" != "" ]];then
                searchVal=$(echo "$CONFIG_DATA" | jq --arg row "$row" '.[]|select(.title==$row)') || {
                    echo "jq搜索出错了"
                    continue
                }
                if [[ "$searchVal" != "" ]];then
                    echo "    改标题在配置中已经存在"
                    continue
                fi
            fi
            cfg[$v]="$row"
            break
        done
    done
    jsonFormat='{title:$title, host:$host, port:$port|tonumber, username:$user, passwd:$passwd}'
    newJson=$(jq -n --arg title "${cfg[0]}" --arg host "${cfg[1]}" --arg port "${cfg[2]}" --arg user "${cfg[3]}" --arg passwd "${cfg[4]}" "$jsonFormat")

    local data="$CONFIG_DATA"
    if [[ "$data" == "" ]];then
        data="[]"
    fi
    CONFIG_DATA=$(echo "$data" | jq --argjson newJson "$newJson" '. += [$newJson]')
    echo "$CONFIG_DATA" > "$CONFIG_PATH"
    if [[ "$?" == "0" ]];then
        echo "配置添加成功"
        echo ""
    fi
}

function setConfig(){
    echo "set"
}

function delConfig(){
    title="$1"
    if [[ "$title" == "" ]];then
        return 1
    fi
    CONFIG_DATA="$(echo "$CONFIG_DATA" | jq --arg title "$title" '.[]|select(.title != $title)'|jq -s |jq '.')"
    echo "$CONFIG_DATA" > "$CONFIG_PATH"
    if [[ "$?" == "0" ]];then
        echo "配置修改成功"
        echo ""
    fi
}

function execSSH(){
    local title="$1"
    if [[ "$title" == "" ]];then
        return 1
    fi
    eval "$(echo "$CONFIG_DATA" | jq -r --arg title "$title" '.[]|select(.title == $title)|to_entries[]|"declare \(.key)=\"\(.value)\""')"
    sshpass -p "$passwd" ssh "${username}@${host}" -p $port -o "StrictHostKeyChecking no" -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa
    return "$?"
}

function readBaseOption(){
    local row="$1"
    local data="$2"
    if [[ "$row" == "exit" ]];then
        return 10
    fi
    if [[ ! "$row" =~ ^: ]];then
        return 0
    fi
    row="${row#:}"
    name="${row%% *}"
    value="${row#* }"
    case "$name" in
        add)
            addConfig
            return 20
            ;;
        set)
            setConfig "$value"
            return 20
            ;;
        del)
            if [[ "$value" == "" ]] || [[ ! "$row" =~ [[:space:]] ]] ;then
                echo "    没有要删除的id"
                continue
            fi
            if [[ "$data" == "" ]];then
                echo "    函数内部没有传递正确的参数"
                return 10
            fi
            delConfig "$(echo "$data"|awk -v id="$value" '$1==id{ print $2 }')"
            return 20
            ;;
    esac
    return 0
}

function serverList(){
    local list="$(formatList)" && echo "$list"
    local count=$(($(formatList "" true|wc -l)))
    local comment="select num:"
    if (($count > 0));then
        comment="select num[1-$count]:"
    fi
    if [[ "$CONFIG_DATA" == "" ]];then
        comment="请输入："
    fi
    while read -p "$comment" row ;do
        declare -i numLine=0
        readBaseOption "$row" "$list" || {
            local returnCode="$?"
            echo "$returnCode"
            case "$returnCode" in
                10)
                    break
                    ;;
                20)
                    numLine=$(($(formatList "" true|wc -l)))
                    comment="select num:"
                    if (($numLine > 0));then
                        comment="select num[1-$numLine]:"
                    fi
                    list="$(formatList)" && echo "$list"
                    continue
                    ;;
            esac
        }
        {
            numLine=0
            while read -r id title host;do
                if [[ "$id" =~ ^[0-9]+$ ]];then
                    ((numLine++))
                fi
            done
        } <<< "$list"
        [[ "$row" =~ ^[0-9]+$ ]] && {
            if (($numLine < $row));then
                continue
            fi
            local title="$(echo "$list"|awk -v row="$row" '$1==row{ print $2 }')"
            execSSH "$title" || {
                return 1
            }
            break
        }
        [[ "$row" == "" ]] && {
            (( $numLine == 1 )) && {
                local title="$(echo "$list"|awk -v row="$numLine" '$1==row{ print $2 }')"
                execSSH "$title" || {
                    return 1
                }
                break
            }
        }
        list="$(formatList "$row")" && echo "$list"
        {
            numLine=0
            while read id title host;do
                if [[ "$id" =~ ^[0-9]+$ ]];then
                    ((numLine++))
                fi
            done
        } <<< "$list"
        comment="select num:"
        if (($numLine > 0));then
            comment="select num[1-$numLine]:"
        fi
    done
}

function main(){
    type jq &>1 > /dev/null || {
        cat <<!
        缺少jq命令
        安装方法：
            MacOS : brew install jq
            Linux : yum install jq
            Ubuntu: apt install jq
!
    return 1
    }
    serverList
}

main "$@"

