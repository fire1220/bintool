#!/bin/bash

readonly commandName="${0##*/}"

function helpInfo(){
    cat <<!
    command:$commandName

    参数：（首次执行需要执行链接参数，之后执行会自动记住该链接参数）
        -u      MySQL用户名
        -p      MySQL密码
        -h      MySQL主机地址
        -P      MySQL端口号(默认3366)

    说明：
        打印某个库的全部表信息

    example:
        $commandName -u'username' -p'passwd' -h'127.0.0.1'

!
    exit 0
}

function helpEnter(){
cat <<!
    常用指令：
        *           查询所有，或输入关键词搜索
        :set val    设置当前搜索的关键词
                    :set "" 或 :set '' 表示清空设置

    其他说明：
        1.输入关键词或者*搜索

  ================================================

!
}

function showColumns(){
    if [[ "$2" == "" ]];then
        return 0
    fi
    database="$2"
    link="mysql -u'$username' -p'$passwd' -h'$hostPath' --database '$database'"
    eval "${link} -e'show tables'|awk 'NR>1{print \$1}'|xargs -I{} ${link} -e'show create table $database.{}\G'"
    eval "${link} -e'select table_name,table_comment from information_schema.tables where table_schema = \"$database\"'"
    return 0
}

function setFunc(){
    local search
    local val="$1"
    search=$(getsetenv -p "$envPath" -k "CONST_SEARCH" -v "$val") || {
        echo "$username set error"
        return 1
    }
    echo "$search"
    return 0
}

function getFunc(){
    local search
    search=$(getsetenv -p "$envPath" -k "CONST_SEARCH") || {
        echo "$username set error"
        return 1
    }
    echo "$search"
    return 128
}

function printFunc(){
    keyWorld=""
    # table list 【 key world: $2 】
    if [[ "$2" != "" ]];then
        keyWorld="【 key world: \033[33m$2\033[0m 】"
    fi
    echo -e "          table list $keyWorld"
    echo "--------------------------------------------------"
    echo "$1"
}

function listNumRead(){
    local listData=""
    local funcName=""
    local search=""
    local printFunc=""
    OPTIND=1
    while getopts "l:f:s:p:" opt;do
        case $opt in
        l)
            listData="$OPTARG";;
        f)
            funcName="$OPTARG";;
        s)
            search="$OPTARG";;
        p)
            printFunc="$OPTARG";;
        esac
    done
    shift $(($OPTIND-1))
    if [[ "$listData" == "" ]] || [[ "$funcName" == "" ]] ; then
        echo "Parameter cannot be empty." >&2
        return 1
    fi
    if [[ "$printFunc" == "" ]];then
        printFunc="echo"
    fi
    local isSelect=true
    while true;do
        if $isSelect ;then
            if [[ "$search" == "*" ]];then
                search=""
            fi
            local formatList=$(echo "$listData" | awk -v search="$search" 'BEGIN{num=0}$1~search{ num++; printf "%-5d%s\n",num,$0 }')
            eval "$printFunc '$formatList' '$search'"
            local countNum="$(echo "$formatList"|wc -l|grep -Eo '[0-9]+')"
            local minNum=1
        fi
        read -p "select number[1-$countNum]:" -r "row"
        if [[ "$row" == "" ]];then
            continue
        fi
        if [[ "$row" == "*" ]];then
            search=""
            isSelect=true
            continue
        fi
        local num=$(echo "$row"|grep -Eo '[0-9]+')
        if [[ "${row}" == "$num" ]] ;then
            if (($num < 1)) || (($countNum < $num)) ;then
                echo "select range 1-$countNum"
                continue
            fi
            value="$(echo "$formatList" | awk -v num="$num" '$1==num{print $0}')"
            eval "$funcName $value"
            break
        fi
        local rowKey="${row%% *}"
        local rowVal="${row#* }"
        # if [[ "$row" != "$rowKey" ]] && [[ "$rowKey" != "" ]] && [[ "$rowVal" != "" ]] ;then
        if [[ "$row" != "$rowKey" ]] && [[ "$rowKey" != "" ]] ;then
            for v in "$@";do
                local argKey="${v%%=*}"
                local argFunc="${v#*=}"
                if [[ "$argKey" == "" ]] || [[ "$argFunc" == "" ]];then
                    continue
                fi
                if [[ "$argKey" == "$rowKey" ]];then
                    local tempFuncRet
                    rowVal=${rowVal#\"}
                    rowVal=${rowVal%\"}
                    rowVal=${rowVal#\'}
                    rowVal=${rowVal%\'}
                    rowVal=$(echo "$rowVal"|sed 's/|/\\|/'g)
                    tempFuncRet=$(eval "$argFunc '$rowVal'") || {
                        echo "$tempFuncRet"
                        continue
                    }
                    search="${tempFuncRet}"
                    isSelect=true
                    break
                fi
            done
            continue
        fi
        search="${row}"
        isSelect=true
        continue
    done
    return 0
}

function getsetenv(){
    local path=""
    local key=""
    local val=""
    local isSet=false
    OPTIND=1
    while getopts "p:k:v:" opt;do
        case "$opt" in
        p)
            path="$OPTARG";;
        k)
            key="$OPTARG";;
        v)
            isSet=true
            val="$OPTARG";;
        esac
    done
    shift $(($OPTIND-1))
    if [[ "$path" == "" ]] ;then
        echo "没有获取到env路径" >&2
        return 1
    fi
    if [[ "$key" == "" ]] ;then
        echo "没有获取到key" >&2
        return 2
    fi

    if ! $isSet ;then
        if [ -f "$path" ] ;then
            . "$path"
            eval "echo \$$key"
        else
            echo ""
        fi
        return 0
    fi

    if [ ! -f "$path" ];then
        touch "$path"
    fi

    if $isSet ;then
        if [[ "$val" == '""' ]] || [[ "$val" == "" ]] ;then
            newVal=$(eval "sed 's/^${key}=\".*\"$//' '$path'")
            if [[ "$newVal" != "$context" ]];then
                echo "$newVal" > "$path"
            fi
            echo ""
            return 0
        fi
    fi
    
    existsName=$(eval "grep -E '^${key}=\".*\"$' '$path'")
    context="${key}=\"${val}\""
    if [[ "$existsName" == "" ]] ;then
        echo "$context" >> "$path"
    else
        newVal=$(eval "sed 's/^${key}=\".*\"$/${key}=\"${val}\"/' '$path'")
        if [[ "$newVal" != "$context" ]];then
            echo "$newVal" > "$path"
        fi
    fi
    echo "$val"
    return 0
}

function main(){
    local username=""
    local passwd=""
    local port="3366"
    local hostPath=""
    local execute=""
    local database=""
    local envPath="$HOME/.mysqltable.env"
    username=$(getsetenv -p "$envPath" -k "CONST_USERNAME") || {
        echo "$username"
        exit 1
    }
    passwd=$(getsetenv -p "$envPath" -k "CONST_PASSWD") || {
        echo "$username"
        exit 1
    }
    hostPath=$(getsetenv -p "$envPath" -k "CONST_HOSTPATH") || {
        echo "$username"
        exit 1
    }
    OPTIND=1
    while getopts "u:p:P:h:d:e:-:" opt;do
        case $opt in
        u)
            username=$(getsetenv -p "$envPath" -k "CONST_USERNAME" -v "$OPTARG") || {
                echo "$username set error"
                exit 1
            }
            ;;
        p)
            # passwd="$OPTARG"
            passwd=$(getsetenv -p "$envPath" -k "CONST_PASSWD" -v "$OPTARG") || {
                echo "$passwd set error"
                exit 1
            }
            ;;
        P)
            # port="$OPTARG"
            port=$(getsetenv -p "$envPath" -k "CONST_PASSWD" -v "$OPTARG") || {
                echo "$port set error"
                exit 1
            }
            ;;
        h)
            # hostPath="$OPTARG"
            hostPath=$(getsetenv -p "$envPath" -k "CONST_HOSTPATH" -v "$OPTARG") || {
                echo "$hostPath set error"
                exit 1
            }
            ;;
        d)
            database="$OPTARG"
            ;;
        e)
            execute="$OPTARG"
            ;;
        -)
            argKeyLong="${OPTARG%%=*}"
            argValLong="${OPTARG#*=}"
            if [[ "$argKeyLong" == "$OPTARG" ]];then
                # bool value
                case "$argKeyLong" in
                    "help")
                        helpInfo
                        ;;
                esac
            fi
            ;;
        esac
    done
    shift $(($OPTIND-1))
    local search
    search=$(getsetenv -p "$envPath" -k "CONST_SEARCH") || {
        echo "$search"
        exit 1
    }
    if [[ "$username" == "" ]] || [[ "$passwd" == "" ]] || [[ "$hostPath" == "" ]];then
        echo "MySQL的账户、密码、主机名称不能为空"
        exit 1
    fi
    executeMysql="mysql -u'$username' -p'$passwd' -h'$hostPath' -e'show schemas' | awk 'NR>1{print $1}'"
    list="$(eval "$executeMysql")"
    helpEnter
    (listNumRead -l "$list" -s "$search" -f "showColumns" -p "printFunc" :get="getFunc" :set="setFunc") || {
        exit 1
    }
    exit 0
}

main $@
